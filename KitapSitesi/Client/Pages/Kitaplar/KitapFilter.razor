@page "/kitaplar/search"
@inject IKitaplarRepository kitaplarRepository
@inject IKitapturRepository kitapturRepository
@inject NavigationManager navigationManager

<h3>Kitap Ara</h3>

<EditForm Model="filterKitaplarDTO">
    <div class="form-inline">
        <div class="form-group mb-2">
            <label for="title" class="sr-only">Başlık</label>
            <input type="text" class="form-control" id="title" placeholder="Kitap İsmi"
                   @bind-value="filterKitaplarDTO.Baslik" @bind-value:event="oninput"
                   @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))" />
        </div>
        <div class="form-group mx-sm-3 mb-2">
            <select class="form-control" @bind="filterKitaplarDTO.KitapturId">
                <option value="0">
                    -- Tür Seçiniz --
                </option>
                @foreach (var kitaptur in Kitapturler)
                {
                    <option value="@kitaptur.Id">@kitaptur.Isim</option>
                }
            </select>
        </div>
        <div class="form-group mx-sm-3 mb-2">
            <input type="checkbox" class="form-check-input" id="okunmayadeger"
                   @bind="filterKitaplarDTO.KitapListele" />
            <label class="form-check-label" for="kitapListele">
                Okunmaya Değer
            </label>
        </div>

        <button type="button" class="btn btn-dark mb-2 mx-sm-3" @onclick="SearchForKitaplar">Filtrele</button>
        <button type="button" class="btn btn-danger mb-2" @onclick="Clear">Temizle</button>
    </div>
</EditForm>
<KitaplarList Kitaplar="Kitaplar"></KitaplarList>

<Pagination CurrentPage="filterKitaplarDTO.Page" TotalAmountPages="totalAmountPages"
            SelectedPage="SelectedPage" />

@code {
    private List<Kitap> Kitaplar;
    private FilterKitaplarDTO filterKitaplarDTO = new FilterKitaplarDTO();
    private int totalAmountPages;
    private List<Kitaptur> Kitapturler = new List<Kitaptur>();

    protected async override Task OnInitializedAsync()
    {
        var queryStrings = navigationManager.GetQueryStrings(navigationManager.Uri);
        Kitapturler = await kitapturRepository.GetKitapturler();
        if (queryStrings != null)
        {
            FillFilterWithQueryStrings(queryStrings);
        }
        await LoadKitaplar();
    }

    private void FillFilterWithQueryStrings(Dictionary<string, string> queryStrings)
    {
        if (queryStrings.ContainsKey("kitapturId"))
        {
            filterKitaplarDTO.KitapturId = int.Parse(queryStrings["kitapturId"]);
        }

        if (queryStrings.ContainsKey("baslik"))
        {
            filterKitaplarDTO.Baslik = queryStrings["baslik"];
        }

        if (queryStrings.ContainsKey("page"))
        {
            filterKitaplarDTO.Page = int.Parse(queryStrings["page"]);
        }
    }

    private async Task SelectedPage(int page)
    {
        filterKitaplarDTO.Page = page;
        await LoadKitaplar();
    }

    private async Task LoadKitaplar()
    {
        var queryString = GenerateQueryString();
        if (!string.IsNullOrWhiteSpace(queryString))
        {
            queryString = $"?{queryString}";
            navigationManager.NavigateTo("kitaplar/search" + queryString);
        }

        var paginatedResponse = await kitaplarRepository.GetKitaplarFiltered(filterKitaplarDTO);
        Kitaplar = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    private string GenerateQueryString()
    {
        var queryStringsDict = new Dictionary<string, string>();
        queryStringsDict["kitapturId"] = filterKitaplarDTO.KitapturId.ToString();
        queryStringsDict["baslik"] = filterKitaplarDTO.Baslik ?? "";
        queryStringsDict["kitaplistele"] = filterKitaplarDTO.KitapListele.ToString();
        queryStringsDict["page"] = filterKitaplarDTO.Page.ToString();

        var defaultValue = new List<string>() { "false", "", "0" };


        return string.Join("&", queryStringsDict
            .Where(x => !defaultValue.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

    }

    private async Task SearchForKitaplar()
    {
        await LoadKitaplar();
    }

    private async Task Clear()
    {
        filterKitaplarDTO.Baslik = "";
        filterKitaplarDTO.KitapturId = 0;
        filterKitaplarDTO.KitapListele = false;
        await LoadKitaplar();
    }

    private async Task TitleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchForKitaplar();
        }
    }
}
